[project]
name = "drf-resource"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "django==3.2.25",
    "djangorestframework==3.15.1",
]

[dependency-groups]
dev = [
  "pre-commit>=4.2",
  "ruff>=0.12",
]

[tool.ruff]
target-version = "py311"
line-length = 120

exclude = [
  ".git",
  ".pytype",
  ".ruff_cache",
  ".venv",
  "__pypackages__",
  "node_modules",
  "scripts",
  "venv",
]

output-format = "full"
format.docstring-code-format = true
lint.select = [
  # https://beta.ruff.rs/docs/rules
  "A",     # flake8-builtins
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # McCabe cyclomatic complexity
  "DJ",    # flake8-django
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle
  "E4",
  "E7",
  "E9",
  "EM",    # flake8-errmsg
  "EXE",   # flake8-executable
  "F",
  "FA",    # flake8-future-annotations
  "FLY",   # flynt
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "INP",   # flake8-no-pep420
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "N",     # pep8-naming
  "NPY",   # NumPy-specific rules
  "PD",    # pandas-vet
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # Pylint
  "PT",    # flake8-pytest-style
  "PYI",   # flake8-pyi
  "RSE",   # flake8-raise
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "T10",   # flake8-debugger
  "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "UP",    # pyupgrade
  "W",     # pycodestyle
  "YTT",   # flake8-2020
  # "ANN",  # flake8-annotations -- FIX ME?
  # "COM",  # flake8-commas -- DO NOT FIX
  # "D",    # pydocstyle -- FIX ME?
  # "ERA",  # eradicate -- DO NOT FIX
  # "FBT",  # flake8-boolean-trap  # FIX ME
  # "PTH",  # flake8-use-pathlib  # FIX ME
  # "Q",    # flake8-quotes
  # "RET",  # flake8-return  # FIX ME?
  # "T20",  # flake8-print
  # "TCH",  # flake8-type-checking
  # "TRY",  # tryceratops
]
lint.ignore = [
  # `ruff rule S101` for a description of that rule
  "B904",    # Within an `except` clause, raise exceptions with `raise ... from err` -- FIX ME
  "B905",    # `zip()` without an explicit `strict=` parameter -- FIX ME
  "EM101",   # Exception must not use a string literal, assign to variable first
  "EM102",
  "EXE001",  # Shebang is present but file is not executable -- DO NOT FIX
  "G004",    # Logging statement uses f-string
  "ISC001",  # Conflicts with ruff format -- DO NOT FIX
  "PLC1901", # `{}` can be simplified to `{}` as an empty string is falsey
  "PLW060",  # Using global for `{name}` but no assignment is done -- DO NOT FIX
  "PLW2901", # PLW2901: Redefined loop variable -- FIX ME
  "PT011",   # `pytest.raises(Exception)` is too broad, set the `match` parameter or use a more specific exception
  "PT018",   # Assertion should be broken down into multiple parts
  "RUF002",
  "RUF003",
  "RUF012",
  "S101",    # Use of `assert` detected -- DO NOT FIX
  "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes -- FIX ME
  "SIM905",  # Consider using a list literal instead of `str.split` -- DO NOT FIX
  "SLF001",  # Private member accessed: `_Iterator` -- FIX ME
  "UP038",   # Use `X | Y` in `{}` call instead of `(X, Y)` -- DO NOT FIX
]

lint.extend-ignore = [ "E402" ]
lint.fixable = [ "ALL" ]
lint.extend-safe-fixes = [ "UP" ]

lint.mccabe.max-complexity = 17 # default: 10
lint.pylint.allow-magic-value-types = [
  "float",
  "int",
  "str",
]
lint.pylint.max-args = 10 # default: 5
lint.pylint.max-branches = 20 # default: 12
lint.pylint.max-returns = 8 # default: 6
lint.pylint.max-statements = 88 # default: 50

[tool.codespell]
ignore-words-list = "3rt,abd,aer,ans,bitap,crate,damon,fo,followings,hist,iff,kwanza,manuel,mater,secant,som,sur,tim,toi,zar"
skip = "./.*,*.json,*.lock,ciphers/prehistoric_men.txt,project_euler/problem_022/p022_names.txt,pyproject.toml,strings/dictionary.txt,strings/words.txt"

# pytest

[tool.pytest.ini_options]
testpaths = [ "tests/" ]
python_files = [ "test_*.py", "tests.py" ]


[tool.uv]
index-url = "https://pypi.tuna.tsinghua.edu.cn/simple"

